import numpy as np
import random
from scipy.stats import beta
from blackjack import BlackJackGame
import matplotlib.pyplot as plt

class Player:
    def get_action(self, player_hand_value, dealer_card_value, bet):
        # Simple strategy: hit if hand value is less than 17, otherwise stand
        return 1 if player_hand_value < 17 else 0

def epsilon_greedy(blackjack, player, epsilon, num_episodes):
    win_rates = []
    wins = 0
    for episode in range(num_episodes):
        if random.uniform(0, 1) < epsilon:
            action = random.choice([1, 0])  # Explore
        else:
            action = 1  # Exploit the best known action

        result = blackjack.play_blackjack(player)
        if result == 1:
            wins += 1

        win_rates.append(wins / (episode + 1))

    return win_rates

def thompson_sampling(blackjack, player, num_episodes):
    win_rates = []
    alpha, beta_params = 1, 1
    wins = 0

    for episode in range(num_episodes):
        sample = np.random.beta(alpha, beta_params)
        action = 1 if sample > 0.5 else 0

        result = blackjack.play_blackjack(player)
        if result == 1:
            wins += 1
            alpha += 1
        else:
            beta_params += 1

        win_rates.append(wins / (episode + 1))

    return win_rates

def compare_strategies(decks, epsilon_values, num_episodes=1000, num_iterations=100):
    results = {}
    player = Player()
    for deck in decks:
        blackjack = BlackJackGame(mute=True, num_decks=deck)
        for epsilon in epsilon_values:
            epsilon_greedy_results = np.zeros(num_episodes)
            thompson_sampling_results = np.zeros(num_episodes)
            for _ in range(num_iterations):
                epsilon_greedy_results += np.array(epsilon_greedy(blackjack, player, epsilon, num_episodes))
                thompson_sampling_results += np.array(thompson_sampling(blackjack, player, num_episodes))
            epsilon_greedy_results /= num_iterations
            thompson_sampling_results /= num_iterations
            results[(deck, epsilon)] = {
                'epsilon_greedy': epsilon_greedy_results,
                'thompson_sampling': thompson_sampling_results
            }
    return results

if __name__ == "__main__":
    deck_configurations = {
        '1 deck': 1,
        '2 decks': 2,
        '4 decks': 4,
        '6 decks': 6,
        '8 decks': 8
    }

    epsilon_values = [0.01, 0.05, 0.1, 0.4]

    results = compare_strategies(deck_configurations.values(), epsilon_values)
    for (deck, epsilon), result in results.items():
        print(f"Results for {deck} decks with epsilon {epsilon}:")
        print(f"Epsilon-Greedy: {result['epsilon_greedy'][-1]}")
        print(f"Thompson Sampling: {result['thompson_sampling'][-1]}")

    # Plot the results
    plt.figure(figsize=(12, 8))
    for (deck, epsilon), result in results.items():
        plt.plot(result['epsilon_greedy'], label=f'Epsilon-Greedy ({deck} decks, epsilon={epsilon})')
        plt.plot(result['thompson_sampling'], label=f'Thompson Sampling ({deck} decks)')

    plt.xlabel('Episodes')
    plt.ylabel('Win Rate')
    plt.legend()
    plt.title('Comparison of Epsilon-Greedy and Thompson Sampling Strategies')
    plt.savefig('comparison_strategies.png')
    plt.show()

    # Find the best performing strategy for each deck and epsilon
    best_strategies = {}
    for (deck, epsilon), result in results.items():
        if result['epsilon_greedy'][-1] > result['thompson_sampling'][-1]:
            best_strategies[(deck, epsilon)] = ('Epsilon-Greedy', result['epsilon_greedy'])
        else:
            best_strategies[(deck, epsilon)] = ('Thompson Sampling', result['thompson_sampling'])

    # Plot the best performing strategy for each deck and epsilon
    plt.figure(figsize=(12, 8))
    for (deck, epsilon), (strategy, win_rates) in best_strategies.items():
        plt.plot(win_rates, label=f'{strategy} ({deck} decks, epsilon={epsilon})')

    plt.xlabel('Episodes')
    plt.ylabel('Win Rate')
    plt.legend()
    plt.title('Best Performing Strategy for Each Deck Configuration and Epsilon')
    plt.savefig('best_performing_strategy.png')
    plt.show()

    # Plot overall strategy convergence
    plt.figure(figsize=(12, 8))
    for epsilon in epsilon_values:
        avg_win_rates_epsilon_greedy = np.mean([result['epsilon_greedy'] for (d, e), result in results.items() if e == epsilon], axis=0)
        plt.plot(avg_win_rates_epsilon_greedy, label=f'Average Epsilon-Greedy (epsilon={epsilon})')
    
    avg_win_rates_thompson_sampling = np.mean([result['thompson_sampling'] for result in results.values()], axis=0)
    plt.plot(avg_win_rates_thompson_sampling, label='Average Thompson Sampling')

    plt.xlabel('Episodes')
    plt.ylabel('Win Rate')
    plt.legend()
    plt.title('Overall Strategy Convergence with Different Epsilon Values')
    plt.savefig('overall_strategy_convergence.png')
    plt.show()

    # Plot overall deck convergence
    plt.figure(figsize=(12, 8))
    for deck in deck_configurations.values():
        best_win_rates = np.mean([win_rates for (d, e), (strategy, win_rates) in best_strategies.items() if d == deck], axis=0)
        plt.plot(best_win_rates, label=f'Best Strategy ({deck} decks)')

    plt.xlabel('Episodes')
    plt.ylabel('Win Rate')
    plt.legend()
    plt.title('Overall Deck Convergence')
    plt.savefig('overall_deck_convergence.png')
    plt.show()